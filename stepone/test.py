# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from numpy import random


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):

        data = [-2, 45, 98, 11, -9]
        size = len(data)

        Dialog.setObjectName("Dialog")
        Dialog.resize(1030, 786)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(10, 20, 981, 721))
        self.groupBox.setObjectName("groupBox")
        self.btnSelectionSort = QtWidgets.QPushButton(self.groupBox , clicked =lambda: self.selectionSort(data,size))
        self.btnSelectionSort.setGeometry(QtCore.QRect(10, 50, 161, 41))
        self.btnSelectionSort.setObjectName("btnSelectionSort")
        self.dial = QtWidgets.QDial(self.groupBox)
        self.dial.setGeometry(QtCore.QRect(410, 60, 81, 91))
        self.dial.setObjectName("dial")
        self.btnBubbleSort = QtWidgets.QPushButton(self.groupBox, clicked =lambda : self.bubblesort(data,size))
        self.btnBubbleSort.setGeometry(QtCore.QRect(10, 100, 161, 41))
        self.btnBubbleSort.setObjectName("btnBubbleSort")
        self.btnMergeSort = QtWidgets.QPushButton(self.groupBox, clicked =lambda : self.mergeSort(data))
        self.btnMergeSort.setGeometry(QtCore.QRect(10, 200, 161, 41))
        self.btnMergeSort.setObjectName("btnMergeSort")
        self.btnQuickSort = QtWidgets.QPushButton(self.groupBox)
        self.btnQuickSort.setGeometry(QtCore.QRect(10, 250, 161, 41))
        self.btnQuickSort.setObjectName("btnQuickSort")
        self.btnInsertionSort = QtWidgets.QPushButton(self.groupBox, clicked =lambda : self.insertionsort(data,size))
        self.btnInsertionSort.setGeometry(QtCore.QRect(10, 150, 161, 41))
        self.btnInsertionSort.setObjectName("btnInsertionSort")
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(40, 330, 941, 381))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizantalLayout_4 = QtWidgets.QHBoxLayout(self.frame)
        self.horizantalLayout_4.setObjectName("horizantalLayout_4")
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)
        self.horizantalLayout_4.addWidget(self.canvas)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox.setTitle(_translate("Dialog", "GroupBox"))
        self.btnSelectionSort.setText(_translate("Dialog", "Selection Sort"))
        self.btnBubbleSort.setText(_translate("Dialog", "Bubble Sort"))
        self.btnMergeSort.setText(_translate("Dialog", "Merge Sort"))
        self.btnQuickSort.setText(_translate("Dialog", "Quick Sort"))
        self.btnInsertionSort.setText(_translate("Dialog", "Insertion Sort"))

    def selectionSort(self, array, size):

        self.figure.clear()

        for step in range(size):
            min_idx = step

            for i in range(step + 1, size):

                # to sort in descending order, change > to < in this line
                # select the minimum element in each loop
                if array[i] < array[min_idx]:
                    min_idx = i

            # put min at the correct position
            (array[step], array[min_idx]) = (array[min_idx], array[step])
            self.figure.clear()
            values = array
            fruits = ['N1', 'N2', 'N3', 'N4', 'N5']
            plt.bar(fruits, values, color='red', width=0.4)
            self.canvas.draw()

    def bubblesort(self,array,size):

        self.figure.clear()

        for i in range(len(array)):

            # loop to compare array elements
            for j in range(0, len(array) - i - 1):

                if array[j] > array[j + 1]:
                    temp = array[j]
                    array[j] = array[j + 1]
                    array[j + 1] = temp

            self.figure.clear()
            values = array
            fruits = ['N1', 'N2', 'N3', 'N4', 'N5']
            plt.bar(fruits, values, color='red', width=0.4)
            self.canvas.draw()

    def insertionsort(self,array,size):
        for step in range(1, len(array)):
            key = array[step]
            j = step - 1

            while j >= 0 and key < array[j]:
                array[j + 1] = array[j]
                j = j - 1

            array[j + 1] = key

        self.figure.clear()
        values = array
        fruits = ['N1', 'N2', 'N3', 'N4', 'N5']
        plt.bar(fruits, values, color='red', width=0.4)
        self.canvas.draw()

'''
    def mergeSort(self,array):
        if len(array) > 1:

            r = len(array) // 2
            L = array[:r]
            M = array[r:]

            mergeSort(L)
            mergeSort(M)

            i = j = k = 0

            while i < len(L) and j < len(M):
                if L[i] < M[j]:
                    array[k] = L[i]
                    i += 1
                else:
                    array[k] = M[j]
                    j += 1
                k += 1

            while i < len(L):
                array[k] = L[i]
                i += 1
                k += 1

            while j < len(M):
                array[k] = M[j]
                j += 1
                k += 1
        self.figure.clear()
        values = array
        fruits = ['N1', 'N2', 'N3', 'N4', 'N5']
        plt.bar(fruits, values, color='red', width=0.4)
        self.canvas.draw()

'''


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
